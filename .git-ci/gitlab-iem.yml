---
###################################################
### configuration templates (to be used for snapshot and release builds)
variables:
  PDVERSION: 0.54-0
  PDBASEURL: https://msp.ucsd.edu/Software/
  PDBASEURL_CERT: "https://spaces.at.internet2.edu/download/attachments/24576265/InCommon%20RSA%20Server%20CA%202.pem?api=v2"
  LANG: C
  MACOSX_DEPLOYMENT_TARGET: "10.9"
  # however, it seems that CI_JOB_NAME is not expanded here!
  # ARTIFACTSDIR: artifacts/${CI_PROJECT_NAME}${CI_JOB_NAME%_*}
  ARTIFACTSDIR: artifacts
  IEM_CI_TMPDIR: .git-ci/_build/
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 1
  ## gitlab-runner feature-flags
  # FF_SCRIPT_SECTIONS: 1
  HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

stages:
  - build
  - test
  - sign
  - deploy

.snapshot:
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - ${ARTIFACTSDIR}
    expire_in: 1 week

.script:zsh_compat: &script_zsh_compat
  - | # zsh fixes
    set -o shwordsplit || true     # zsh doesn't do wordsplitting by default...
    set -o nonomatch   || true     # zsh bails out if globbing patterns do not expand

.script:pd-cacert: &script_pd_cacert
  - pdcacert="/tmp/pdcacert.pem"
  - rm -rf "${pdcacert}"
  - test -z "${PDBASEURL_CERT}" || curl --fail -s "${PDBASEURL_CERT}" -o "${pdcacert}" || true
  - test -e "${pdcacert}" || pdcacert=""


.image:macos:
  tags:
    - tart
  image: registry.git.iem.at/devtools/docker/tart/macos-monterey-xcode:latest

.image:windows:
  tags:
    - sardinecake
  image: registry.git.iem.at/devtools/sardinecake/windows:latest

.build:
  stage: build
  variables:
    localdeps: ".git-ci/iem-ci/localdeps/localdeps"
  script:
    - *script_zsh_compat
    - |
      DESTDIR="$(pwd)/${ARTIFACTSDIR}/${CI_JOB_NAME%%:*}"
    - echo "PDDIR ${PDDIR}"
    - echo "PD ${PD}"
    - echo "extension ${extension}"
    - echo "floatsize ${floatsize}"
    - echo "HOST_ARCH_GNU ${HOST_ARCH_GNU}"
    - echo "fatarchs ${fatarchs}"
    - echo "DESTDIR ${DESTDIR}"
    - ./autogen.sh
    - ./configure ${fatarchs:+--enable-fat-binary=${fatarchs}} ${HOST_ARCH_GNU:+--host="${HOST_ARCH_GNU}"} ${PDDIR:+--with-pd="${PDDIR}"} ${extension:+--with-extension="${extension}"} ${floatsize:+--with-floatsize="${floatsize}"} --with-build-date="${CI_COMMIT_TIMESTAMP}"
    - make check -j2
    - |
      make install DESTDIR="${DESTDIR}" libdir=/
    # finally split the binaries from the debug information
    - if command -v ${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}strip; then export STRIP=${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}strip; fi
    - if command -v ${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}objcopy; then export OBJCOPY=${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}objcopy; fi
    - echo "STRIP ${STRIP}"
    - echo "OBJCOPY ${OBJCOPY}"
    - du -sh "${DESTDIR}"
    - find "${DESTDIR}" -type f -type f -not -name "*.pd" -not -name "*.txt" -not -name "*.la" -exec .git-ci/split-debug {} + || echo "ignoring problems when splitting debug info"
    - du -sh "${DESTDIR}"

.build:linux:
  extends:
    - .build
  image: registry.git.iem.at/devtools/docker/debiancross:amd64
  before_script:
    - *script_pd_cacert
    - mkdir -p "${IEM_CI_TMPDIR}"
    - apt-get update && apt-get install -y --no-install-recommends automake libtool make equivs curl patchelf ${TARGETDEBARCH:+cross}build-essential${TARGETDEBARCH:+-}${TARGETDEBARCH}
    - equivs-control "${IEM_CI_TMPDIR}"/builddeps
    - sed -e "s|^\(Package:\) .*|\1 builddeps-${CI_PROJECT_NAME}|" -e '/^Depends/d' -i "${IEM_CI_TMPDIR}"/builddeps
    - echo "Depends:"" puredata-dev, puredata-core, libsndfile1-dev, libgsl-dev, libfftw3-dev" >> "${IEM_CI_TMPDIR}"/builddeps
    - (cd "${IEM_CI_TMPDIR}/"; equivs-build ${TARGETDEBARCH:+-a ${TARGETDEBARCH}} builddeps)
    - find  "${IEM_CI_TMPDIR}/" -name "*.deb" -exec dpkg -i {} + || apt-get -f install -y --no-install-recommends
    - mkdir -p /usr/local/pd
    - echo "${PDBASEURL}/pd-${PDVERSION}.src.tar.gz"
    - test -z "${PDVERSION}" || curl -sL ${pdcacert:+--cacert "${pdcacert}"} "${PDBASEURL}/pd-${PDVERSION}.src.tar.gz" | tar --extract --gzip --strip-components=1 --directory /usr/local/pd/
    - tmp_pdinc=$(find /usr/local/pd/ -name "m_pd.h" -exec dirname {} + -quit)
    - test ! -d "${tmp_pdinc}" || export PDDIR="${tmp_pdinc}"
    - date
  after_script:
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${ARTIFACTSDIR}" -type f "(" -name "*.${extension}" -or -name "*.pd_linux" -or -name "*.so" ")" -exec "${localdeps}.linux.sh" -v -d "${depdir}" {} +
    - find . -iname "lib*.so*" || true

.build:macos: &build_macos
  extends:
    - .image:macos
    - .build
  variables:
    CODESIGNFLAGS: --timestamp --strict --force
  before_script:
    - *script_zsh_compat
    - *script_pd_cacert
    - date
    # make sure we have a good gitlab runner
    - (which gitlab-runner; gitlab-runner --version) || brew install gitlab-runner || true
    - (which gitlab-runner; gitlab-runner --version) || true
    # install dependencies
    - brew update
    - brew bundle --no-upgrade --file=.git-ci/macOS.brew
    # some of the fatbrew files end up as keg-only (and are therefore not found by pkg-config), so:
    - brew list --full-name | grep iem/fatbrew | while read pkg; do echo $pkg; brew unlink ${pkg} || true; brew link ${pkg} || true; done
    # install Pd
    - rm -rf /Applications/Pd*.app/
    - rm -rf "${IEM_CI_TMPDIR}"
    # get Pd tarball
    - echo "${PDBASEURL}/pd-${PDVERSION}.mac.tar.gz"
    - curl -sL ${pdcacert:+--cacert "${pdcacert}"} "${PDBASEURL}/pd-${PDVERSION}.mac.tar.gz" | tar --extract --gzip --directory /Applications/ || mkdir -p "${IEM_CI_TMPDIR}"
    # if there was no tarball, try to get a zip-file
    - echo  "${PDBASEURL}/pd-${PDVERSION}.macos.zip"
    - test ! -d "${IEM_CI_TMPDIR}" || wget -q ${pdcacert:+--ca-certificarte="${pdcacert}"} -O "${IEM_CI_TMPDIR}"/Pd.zip "${PDBASEURL}/pd-${PDVERSION}.macos.zip"
    - test ! -f "${IEM_CI_TMPDIR}"/Pd.zip || unzip "${IEM_CI_TMPDIR}"/Pd.zip -d "${IEM_CI_TMPDIR}"
    # the ZIP-file contains a .dmg containing Pd
    - |
      for dmg in "${IEM_CI_TMPDIR}"/Pd*.dmg; do break; done
    - pddisk=""
    - test ! -f "${dmg}" || pddisk=$(hdiutil attach "${dmg}" 2>/dev/null | egrep "^/.*/Volumes/" | tail -1 | awk '{print $NF}')
    - rm -rf "${dmg}"
    - |
      for app in "${pddisk}"/Pd*.app "${IEM_CI_TMPDIR}"/Pd*.app; do if test -d "${app}"; then cp -r "${app}" /Applications/; break; fi; done
    - test ! -d "${pddisk}" || umount "${pddisk}"
    - |
      rm -rf "${IEM_CI_TMPDIR}"
      dmg=""
      pddisk=""
      app=""
    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - export PDDIR=$(find /Applications/Pd*.app/Contents/Resources -maxdepth 1 -type d -print -quit)
    - echo "PD=${PD}"
    - echo "PDDIR=${PDDIR}"
    - date
  after_script:
    - *script_zsh_compat
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${ARTIFACTSDIR}" -type f "(" -name "*.${extension}" -or -name "*.pd_darwin" -or -name "*.d_fat" -or -name "*.so" ")" -exec "${localdeps}.macos.sh" -v -F -d "${depdir}" {} +
    - find . -iname "*.dylib*" || true
    - IEM_SIGN_SRCDIR="${ARTIFACTSDIR}/${CI_JOB_NAME%%:*}"
    - !reference [.script:codesign:macos]

.build:w64:
  extends:
    - .image:windows
    - .build
  variables:
    IEMCI_CONFIGURATIONS: mingw64
    PDARCHSUFFIX: ""
    extension: m_amd64
  before_script:
    - *script_pd_cacert
    - echo "floatsize=${floatsize}"
    - echo "${PDBASEURL}/pd-${PDVERSION}${PDARCHSUFFIX}.msw.zip"
    - test "${floatsize}" = 64 || wget -q ${pdcacert:+--ca-certificarte="${pdcacert}"} -O Pd.zip "${PDBASEURL}/pd-${PDVERSION}${PDARCHSUFFIX}.msw.zip" || echo "oops $?"
    - echo "https://get.puredata.info/pure-data/releases/${PDVERSION}-pd64/Pd64-${PDVERSION}${PDARCHSUFFIX}.msw.zip"
    - test "${floatsize}" != 64 || wget -q ${pdcacert:+--ca-certificarte="${pdcacert}"} -O Pd.zip "https://get.puredata.info/pure-data/releases/${PDVERSION}-pd64/Pd64-${PDVERSION}${PDARCHSUFFIX}.msw.zip" || echo "oops $?"
    - mkdir -p _pd
    - unzip -q Pd.zip -d "_pd"
    - mv -v "_pd"/*/* "_pd"
    - rm -f Pd.zip
    - rm -f _pd/bin/msvcr*.dll
    - export PDDIR="$(pwd)/_pd"
    - export PD=$(find "${PDDIR}" "(" -name "pd.com" -o -name "pd64.com" ")" -print -quit)
    - pacman --noconfirm -S $(cat .git-ci/msys2.pacman  | sed -e 's|#.*||' -e "s|@MINGW@|${MINGW_PACKAGE_PREFIX}-|") || true
    - date
  after_script:
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${ARTIFACTSDIR}" -type f "(" -name "*.${extension}" -or -name "*.dll" ")" -exec "${localdeps}.win.sh" -v -d "${depdir}" {} +
    - find . -iname "*.dll" -or -iname "*.w32" -or -iname "*.w64" || true

.build:w32:
  extends:
    - .build:w64
  variables:
    IEMCI_CONFIGURATIONS: mingw32
    PDARCHSUFFIX: "-i386"
    extension: dll

###################################################
### the actual jobs: (linux,macos,windows)*(single,double)

linux-amd64-32:
  extends:
    - .build:linux
    - .snapshot
darwin-fat-32:
  extends:
    - .build:macos
    - .snapshot
  variables:
    extension: d_fat
    fatarchs: "x86_64,arm64"
windows-i386-32:
  extends:
    - .build:w32
    - .snapshot
windows-amd64-32:
  extends:
    - .build:w64
    - .snapshot

.double:
  variables:
    floatsize: 64
  allow_failure: true

linux-amd64-64:
  extends:
    - linux-amd64-32
    - .double
  variables:
    extension: linux-amd64-64.so
darwin-fat-64:
  extends:
    - darwin-fat-32
    - .double
  variables:
    extension: darwin-fat-64.so
windows-i386-64:
  extends:
    - windows-i386-32
    - .double
  variables:
    extension: windows-i386-64.dll
windows-amd64-64:
  extends:
    - windows-amd64-32
    - .double
  variables:
    extension: windows-amd64-64.dll

linux-i386-32:
  image: registry.git.iem.at/devtools/docker/debiancross:i386
  extends:
    - linux-amd64-32
  variables:
    extension: l_i386
linux-i386-64:
  extends:
    - linux-i386-32
    - .double
  variables:
    extension: linux-i386-64.so

linux-armv7-32:
  image: registry.git.iem.at/devtools/docker/debiancross:armhf
  extends:
    - linux-amd64-32
  variables:
    extension: l_arm
linux-armv7-64:
  extends:
    - linux-armv7-32
    - .double
  variables:
    extension: linux-armv7-64.so

linux-arm64-32:
  image: registry.git.iem.at/devtools/docker/debiancross:arm64
  extends:
    - linux-amd64-32
  variables:
    extension: l_arm64
linux-arm64-64:
  extends:
    - linux-arm64-32
    - .double
  variables:
    extension: linux-arm64-64.so


distcheck:
  extends:
    - .build:linux
  stage: test
  dependencies: []
  needs: []
  script:
    - autoreconf -fiv || ./autogen.sh
    - ./configure ${fatarchs:+--enable-fat-binary=${fatarchs}} ${HOST_ARCH_GNU:+--host="${HOST_ARCH_GNU}"} ${PDDIR:+--with-pd="${PDDIR}"} ${extension:+--with-extension="${extension}"} ${floatsize:+--with-floatsize="${floatsize}"} --with-build-date="${CI_COMMIT_TIMESTAMP}"
    - make distcheck -j2
  after_script:
    - echo done

macOS:notarize:
  stage: deploy
  image: python:alpine
  dependencies:
    - darwin-fat-32
    - darwin-fat-64
  needs:
    - darwin-fat-32
    - darwin-fat-64
  variables:
    IEM_NOTARIZE_SRCDIR: artifacts
  before_script:
    - apk add zip git
  script:
    - !reference [.script:notarize:macos]
  allow_failure: true
  artifacts:
    name: notarization
    paths:
      - ./notar*.*


deken:
  stage: deploy
  image: registry.git.iem.at/pd/deken:latest
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install git
  script:
    - |
      : ${ARTIFACTSDIR:=artifacts}
    # regroup packages by OS
    - rm -rf __groups
    - for d in "${ARTIFACTSDIR}"/*-*-*/; do [ -d "${d}" ] || break; g="${d%/}"; g="${g##*/}"; g="${g%%-*}"; o="__groups/${g}"; mkdir -p "${o}"; tar c -C "${d}" . | tar x -C "${o}"; rm -rf "${d}"; done
    - mv __groups/* "${ARTIFACTSDIR}"
    - rm -rf __groups
    # make sure all the files have the proper permissions
    - chmod -R a+rX,u+w,go-w "${ARTIFACTSDIR}"
    # remove ltlib leftovers
    - find "${ARTIFACTSDIR}"/ "(" -name "*.la" -or -name "*.a" ")" -delete
    # remove debug information
    - find "${ARTIFACTSDIR}"/ -name "*.debug" -delete
    # create a source package
    - git archive --format=tar --prefix="${ARTIFACTSDIR}/src/${CI_PROJECT_NAME}/" HEAD | tar xf -
    # create deken packages
    - find  "${ARTIFACTSDIR}"/ -mindepth 1 -maxdepth 2 -type d -name "${CI_PROJECT_NAME}" -exec deken package --version="${CI_COMMIT_TAG#v}" {} +
    - find . -name "*.dek"
    # upload deken packages
    - test -z "${CI_COMMIT_TAG}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: deken-package
    paths:
      - ./*.dek
      - ./*.dek.*


# our SAST jobs don't have any prerequisites, so run them early...
sast:
  dependencies: []
  needs: []

include:
  # for the codesign templates
  - https://git.iem.at/pd/iem-ci/-/raw/main/pd-lib-builder/codesign.yml
  # additionally run some static code analysis
  - template: Security/SAST.gitlab-ci.yml
