###################################################
### configuration templates (to be used for snapshot and release builds)
variables:
  PDVERSION: 0.54-0
  LANG: C
  MACOSX_DEPLOYMENT_TARGET: "10.9"
  # however, it seems that CI_JOB_NAME is not expanded here!
  #ARTIFACTSDIR: artifacts/${CI_PROJECT_NAME}${CI_JOB_NAME%_*}
  ARTIFACTSDIR: artifacts
  IEM_CI_TMPDIR: .git-ci/_build/
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 1

.snapshot:
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - ${ARTIFACTSDIR}
    expire_in: 1 week

.build:
  stage: build
  script:
    - |
      DESTDIR="$(pwd)/${ARTIFACTSDIR}/${CI_JOB_NAME%%:*}"
    - echo "PDDIR ${PDDIR}"
    - echo "PD ${PD}"
    - echo "extension ${extension}"
    - echo "floatsize ${floatsize}"
    - echo "HOST_ARCH_GNU ${HOST_ARCH_GNU}"
    - echo "fatarchs ${fatarchs}"
    - echo "DESTDIR ${DESTDIR}"
    - ./autogen.sh
    - ./configure ${fatarchs:+--enable-fat-binary=${fatarchs}} ${HOST_ARCH_GNU:+--host="${HOST_ARCH_GNU}"} ${PDDIR:+--with-pd="${PDDIR}"} ${extension:+--with-extension="${extension}"} ${floatsize:+--with-floatsize="${floatsize}"}
    - make check -j2
    - |
      make install DESTDIR="${DESTDIR}" libdir=/
    # finally split the binaries from the debug information
    - if command -v ${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}strip; then export STRIP=${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}strip; fi
    - if command -v ${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}objcopy; then export OBJCOPY=${HOST_ARCH_GNU}${HOST_ARCH_GNU:+-}objcopy; fi
    - echo "STRIP ${STRIP}"
    - echo "OBJCOPY ${OBJCOPY}"
    - du -sh "${DESTDIR}"
    - find "${DESTDIR}" -type f -type f -not -name "*.pd" -not -name "*.txt" -not -name "*.la" -exec .git-ci/split-debug {} + || echo "ignoring problems when splitting debug info"
    - du -sh "${DESTDIR}"

.build:linux:
  extends:
    - .build
  image: registry.git.iem.at/devtools/docker/debiancross:amd64
  before_script:
    - mkdir -p "${IEM_CI_TMPDIR}"
    - apt-get update && apt-get install -y --no-install-recommends automake libtool make equivs curl patchelf ${TARGETDEBARCH:+cross}build-essential${TARGETDEBARCH:+-}${TARGETDEBARCH}
    - equivs-control "${IEM_CI_TMPDIR}"/builddeps
    - sed -e "s|^\(Package:\) .*|\1 builddeps-${CI_PROJECT_NAME}|" -e '/^Depends/d' -i "${IEM_CI_TMPDIR}"/builddeps
    - echo "Depends:"" puredata-dev, puredata-core, libsndfile1-dev, libgsl-dev, libfftw3-dev" >> "${IEM_CI_TMPDIR}"/builddeps
    - (cd "${IEM_CI_TMPDIR}/"; equivs-build ${TARGETDEBARCH:+-a ${TARGETDEBARCH}} builddeps)
    - find  "${IEM_CI_TMPDIR}/" -name "*.deb" -exec dpkg -i {} + || apt-get -f install -y --no-install-recommends
    - mkdir -p /usr/local/pd
    - test -z "${PDVERSION}" || curl -sL http://msp.ucsd.edu/Software/pd-${PDVERSION}.src.tar.gz | tar --extract --gzip --strip-components=1 --directory /usr/local/pd/
    - tmp_pdinc=$(find /usr/local/pd/ -name "m_pd.h" -exec dirname {} + -quit)
    - test ! -d "${tmp_pdinc}" || export PDDIR="${tmp_pdinc}"
    - date
  after_script:
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${ARTIFACTSDIR}" -type f "(" -name "*.${extension}" -or -name "*.pd_linux" -or -name "*.so" ")" -exec .git-ci/iem-ci/localdeps/localdeps.linux.sh -v -d "${depdir}" {} +

.build:macos: &build_macos
  extends:
    - .build
  tags:
     - bigsur
  before_script:
    - date
    - brew bundle --no-upgrade --file=.git-ci/macOS.brew
    - rm -rf /Applications/Pd*.app/
    - rm -rf "${IEM_CI_TMPDIR}"
    # get Pd tarball
    - curl -sL http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz | tar --extract --gzip --directory /Applications/ || mkdir -p "${IEM_CI_TMPDIR}"
    # if there was no tarball, try to get a zip-file
    - test ! -d "${IEM_CI_TMPDIR}" || wget -q -O "${IEM_CI_TMPDIR}"/Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.macos.zip
    - test ! -f "${IEM_CI_TMPDIR}"/Pd.zip || unzip "${IEM_CI_TMPDIR}"/Pd.zip -d "${IEM_CI_TMPDIR}"
    # the ZIP-file contains a .dmg containing Pd
    - |
      for dmg in "${IEM_CI_TMPDIR}"/Pd*.dmg; do break; done
    - pddisk=""
    - test ! -f "${dmg}" || pddisk=$(hdiutil attach "${dmg}" 2>/dev/null | egrep "^/.*/Volumes/" | tail -1 | awk '{print $NF}')
    - rm -rf "${dmg}"
    - |
      for app in "${pddisk}"/Pd*.app "${IEM_CI_TMPDIR}"/Pd*.app; do if test -d "${app}"; then cp -r "${app}" /Applications/; break; fi; done
    - test ! -d "${pddisk}" || umount "${pddisk}"
    - |
      rm -rf "${IEM_CI_TMPDIR}"
      dmg=""
      pddisk=""
      app=""
    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - export PDDIR=$(find /Applications/Pd*.app/Contents/Resources -maxdepth 1 -type d -print -quit)
    - echo "PD=${PD}"
    - echo "PDDIR=${PDDIR}"
    - date
  after_script:
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${ARTIFACTSDIR}" -type f "(" -name "*.${extension}" -or -name "*.pd_darwin" -or -name "*.d_fat" -or -name "*.so" ")" -exec .git-ci/iem-ci/localdeps/localdeps.macos.sh -v -d "${depdir}" {} +

.build:w32:
  extends:
    - .build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32
  before_script:
    - test "${floatsize}" = 64 || wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}-i386.msw.zip
    - test "${floatsize}" != 64 || wget -q -O Pd.zip https://get.puredata.info/pure-data/releases/0.54-0-pd64/Pd64-0.54-0-i386.msw.zip
    - mkdir -p _pd
    - unzip -q Pd.zip -d "_pd"
    - mv -v "_pd"/*/* "_pd"
    - rm -f Pd.zip
    - rm -f _pd/bin/msvcr*.dll
    - export PDDIR="$(pwd)/_pd"
    - export PD=$(find "${PDDIR}" "(" -name "pd.com" -o -name "pd64.com" ")" -print -quit)
    - pacman --noconfirm -S $(cat .git-ci/msys2.pacman  | sed -e 's|#.*||' -e "s|@MINGW@|${MINGW_PACKAGE_PREFIX}-|") || true
    - date
  after_script:
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${ARTIFACTSDIR}" -type f "(" -name "*.${extension}" -or -name "*.dll" ")" -exec .git-ci/iem-ci/localdeps/localdeps.win.sh -v -d "${depdir}" {} +

.build:w64:
  extends:
    - .build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw64
  before_script:
    - test "${floatsize}" = 64 || wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.msw.zip
    - test "${floatsize}" != 64 || wget -q -O Pd.zip https://get.puredata.info/pure-data/releases/0.54-0-pd64/Pd64-0.54-0.msw.zip
    - mkdir -p _pd
    - unzip -q Pd.zip -d "_pd"
    - mv -v "_pd"/*/* "_pd"
    - rm -f Pd.zip
    - rm -f _pd/bin/msvcr*.dll
    - export PDDIR="$(pwd)/_pd"
    - export PD=$(find "${PDDIR}" "(" -name "pd.com" -o -name "pd64.com" ")" -print -quit)
    - pacman --noconfirm -S $(cat .git-ci/msys2.pacman  | sed -e 's|#.*||' -e "s|@MINGW@|${MINGW_PACKAGE_PREFIX}-|") || true
    - date
  after_script:
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${ARTIFACTSDIR}" -type f "(" -name "*.${extension}" -or -name "*.dll" ")" -exec .git-ci/iem-ci/localdeps/localdeps.win.sh -v -d "${depdir}" {} +

###################################################
### the actual jobs: (linux,macos,windows)*(single,double)

linux-amd64-32:
  extends:
    - .build:linux
    - .snapshot
darwin-fat-32:
  extends:
    - .build:macos
    - .snapshot
  variables:
    extension: d_fat
    fatarchs: "x86_64,arm64"
windows-i386-32:
  extends:
    - .build:w32
    - .snapshot
windows-amd64-32:
  extends:
    - .build:w64
    - .snapshot

.double:
  variables:
    floatsize: 64
  allow_failure: true

linux-amd64-64:
  extends:
    - linux-amd64-32
    - .double
  variables:
    extension: linux-amd64-64.so
darwin-fat-64:
  extends:
    - darwin-fat-32
    - .double
  variables:
    extension: darwin-fat-64.so
windows-i386-64:
  extends:
    - windows-i386-32
    - .double
  variables:
    extension: windows-i386-64.dll
windows-amd64-64:
  extends:
    - windows-amd64-32
    - .double
  variables:
    extension: windows-amd64-64.dll

linux-i386-32:
  image: registry.git.iem.at/devtools/docker/debiancross:i386
  extends:
    - linux-amd64-32
  variables:
    extension: l_i386
linux-i386-64:
  extends:
    - linux-i386-32
    - .double
  variables:
    extension: linux-i386-64.so

linux-armv7-32:
  image: registry.git.iem.at/devtools/docker/debiancross:armhf
  extends:
    - linux-amd64-32
  variables:
    extension: l_arm
linux-armv7-64:
  extends:
    - linux-armv7-32
    - .double
  variables:
    extension: linux-armv7-64.so

linux-arm64-32:
  image: registry.git.iem.at/devtools/docker/debiancross:arm64
  extends:
    - linux-amd64-32
  variables:
    extension: l_arm64
linux-arm64-64:
  extends:
    - linux-arm64-32
    - .double
  variables:
    extension: linux-arm64-64.so


deken:
  stage: deploy
  image: registry.git.iem.at/pd/deken:latest
  variables:
    DEKEN_ROOT: "yes"
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install git
  script:
    - chmod -R go-w artifacts/
# remove ltlib leftovers
    - find artifacts/ "(" -name "*.la" -or -name "*.a" ")" -delete
# remove debug information
    - find ${ARTIFACTSDIR}/ -name "*.debug" -delete
# create a source package
    - git archive --format=tar --prefix=artifacts/src/${CI_PROJECT_NAME}/ HEAD | tar xf -
# create deken packages
    - for d in artifacts/*/${CI_PROJECT_NAME}/; do deken package --version="${CI_COMMIT_TAG#v}" "${d}"; done
    - find . -name "*.dek"
# upload deken packages
    - test -z "${CI_COMMIT_TAG}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: deken-package
    paths:
      - ./*.dek
      - ./*.dek.*
