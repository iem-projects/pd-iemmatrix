###################################################
### configuration templates (to be used for snapshot and release builds)
variables:
  PDVERSION: 0.54-0
  LANG: C
  MACOSX_DEPLOYMENT_TARGET: "10.9"
  # however, it seems that CI_JOB_NAME is not expanded here!
  #ARTIFACTSDIR: artifacts/${CI_PROJECT_NAME}${CI_JOB_NAME%_*}
  ARTIFACTSDIR: artifacts/${CI_PROJECT_NAME}${CI_JOB_NAME}
  IEM_CI_TMPDIR: .git-ci/_build/

.snapshot:
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - ${ARTIFACTSDIR}
    expire_in: 1 week

.build:
  stage: build
  script:
    - ./autogen.sh
    - ./configure --enable-fat-binary=x86_64,arm64 ${PDDIR:+--with-pd="${PDDIR}"} ${extension:+--with-extension="${extension}"} ${floatsize:+--with-floatsize="${floatsize}"}
    - make check -j2
    - make install DESTDIR=$(pwd)/${ARTIFACTSDIR} libdir=/

.build:linux:
  extends:
    - .build
  image: registry.git.iem.at/devtools/docker/debiancross:amd64
  before_script:
    - mkdir -p /etc/apt/sources.list.d/
    - touch /etc/apt/sources.list
    - find /etc/apt/sources.list /etc/apt/sources.list.d/ -name "*.list" -type f -exec egrep "^deb " {} ";" | sed -e 's|^deb |deb-src |' > /etc/apt/sources.list.d/${CI_COMMIT_REF_SLUG}.list
    - apt-get update && apt-get install -y --no-install-recommends make puredata-dev puredata-core
    - apt-get install -y --no-install-recommends libsndfile1-dev libgsl-dev libfftw3-dev
    - date
.build:macos: &build_macos
  extends:
    - .build
  tags:
     - bigsur
  before_script:
    - date
    - brew bundle --no-upgrade --file=.git-ci/macOS.brew
    - rm -rf /Applications/Pd*.app/
    - rm -rf "${IEM_CI_TMPDIR}"
    # get Pd tarball
    - curl -sL http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz | tar --extract --gzip --directory /Applications/ || mkdir -p "${IEM_CI_TMPDIR}"
    # if there was no tarball, try to get a zip-file
    - test ! -d "${IEM_CI_TMPDIR}" || wget -q -O "${IEM_CI_TMPDIR}"/Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.macos.zip
    - test ! -f "${IEM_CI_TMPDIR}"/Pd.zip || unzip "${IEM_CI_TMPDIR}"/Pd.zip -d "${IEM_CI_TMPDIR}"
    # the ZIP-file contains a .dmg containing Pd
    - |
      for dmg in "${IEM_CI_TMPDIR}"/Pd*.dmg; do break; done
    - pddisk=""
    - test ! -f "${dmg}" || pddisk=$(hdiutil attach "${dmg}" 2>/dev/null | egrep "^/.*/Volumes/" | tail -1 | awk '{print $NF}')
    - rm -rf "${dmg}"
    - |
      for app in "${pddisk}"/Pd*.app "${IEM_CI_TMPDIR}"/Pd*.app; do if test -d "${app}"; then cp -r "${app}" /Applications/; break; fi; done
    - test ! -d "${pddisk}" || umount "${pddisk}"
    - |
      rm -rf "${IEM_CI_TMPDIR}"
      dmg=""
      pddisk=""
      app=""
    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - export PDDIR=$(find /Applications/Pd*.app/Contents/Resources -maxdepth 1 -type d -print -quit)
    - echo "PD=${PD}"
    - echo "PDDIR=${PDDIR}"
    - date
  after_script:
    - find "${ARTIFACTSDIR}" "(" -name "*.pd_darwin" -or -name "*.so" ")" -exec .git-ci/localdeps.macos.sh {} +

.build:w32:
  extends:
    - .build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32
  before_script:
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}-i386.msw.zip
    - mkdir -p _pd
    - unzip -q Pd.zip -d "_pd"
    - mv -v "_pd"/*/* "_pd"
    - rm -f Pd.zip
    - rm -f _pd/bin/msvcr*.dll
    - export PD="_pd/bin/pd.com"
    - pacman --noconfirm -S $(cat .git-ci/msys2.pacman  | sed -e 's|#.*||' -e "s|@MINGW@|${MINGW_PACKAGE_PREFIX}-|") || true
    - date
    - PDDIR="$(pwd)/_pd"
  after_script:
    - find "${ARTIFACTSDIR}" -name "*.dll" -exec .git-ci/localdeps.win.sh {} +

.build:w64:
  extends:
    - .build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw64
  before_script:
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.msw.zip
    - mkdir -p _pd
    - unzip -q Pd.zip -d "_pd"
    - mv -v "_pd"/*/* "_pd"
    - rm -f Pd.zip
    - rm -f _pd/bin/msvcr*.dll
    - export PD="_pd/bin/pd.com"
    - pacman --noconfirm -S $(cat .git-ci/msys2.pacman  | sed -e 's|#.*||' -e "s|@MINGW@|${MINGW_PACKAGE_PREFIX}-|") || true
    - date
  after_script:
    - find "${ARTIFACTSDIR}" -name "*.dll" -exec .git-ci/localdeps.win.sh {} +

###################################################
### the actual jobs: (linux,macos,windows)*(release,snapshot)

Linux:
  extends:
    - .build:linux
    - .snapshot
Darwin:
  extends:
    - .build:macos
    - .snapshot
W32:
  extends:
    - .build:w32
    - .snapshot
W64:
  extends:
    - .build:w64
    - .snapshot

.double:
  variables:
    floatsize: 64
  allow_failure: true

Linux:Pd64:
  extends:
    - Linux
    - .double
  variables:
    extension: linux-amd64-64.so
Darwin:Pd64:
  extends:
    - Darwin
    - .double
  variables:
    extension: darwin-fat-64.so
W32:Pd64:
  extends:
    - W32
    - .double
  variables:
    extension: windows-i386-64.so
W64:Pd64:
  extends:
    - W64
    - .double
  variables:
    extension: windows-amd64-64.so


deken:
  stage: deploy
  image: registry.git.iem.at/pd/deken:latest
  only:
    - tags
  variables:
    DEKEN_ROOT: "yes"
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install git
  script:
    - chmod -R go-w artifacts/
# remove ltlib leftovers
    - find artifacts/ "(" -name "*.la" -or -name "*.a" ")" -delete
# create a source package
    - git archive --format=tar --prefix=artifacts/src/${CI_PROJECT_NAME}/ HEAD | tar xf -
# create deken packages
    - for d in artifacts/*/${CI_PROJECT_NAME}/; do deken package --version="${CI_COMMIT_TAG#v}" "${d}"; done
# upload deken packages
    - test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
