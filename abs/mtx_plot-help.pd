#N struct mtx_vis-plot float x float y array mtx_vis-array mtx_vis-element;
#N struct mtx_vis-element float x float y float c float dx float dy;
#N canvas 128 118 666 646 10;
#X declare -lib iemmatrix;
#X obj 475 529 matrix;
#X text 345 528 see also help for;
#X obj 48 141 t a a a;
#N canvas 460 154 494 171 META 0;
#X text 12 105 AUTHOR IOhannes m zmoelnig;
#X text 12 125 HELP_PATCH_AUTHORS IOhannes m zmÃ¶lnig;
#X text 12 25 LICENSE GPL-2+;
#X text 12 65 INLET_0 matrix;
#X text 12 5 KEYWORDS control matrix;
#X obj 16 147 declare -lib iemmatrix;
#X text 12 44 DESCRIPTION plot a matrix;
#X restore 481 16 pd META;
#X obj 92 164 mtx_plot;
#X obj 101 100 mtx_rand;
#X obj 48 494 mtx_plot 200 50;
#X obj 101 33 loadbang;
#X msg 101 73 10;
#X text 136 10 plot a matrix;
#X text 214 56 [mtx_plot] will display the values of a matrix \, clipped between 0 (black) and 1 (white);
#X obj 475 549 mtx_print;
#X msg 48 74 5;
#X text 186 427 you can give the size of the matrix plot \, either as a single value (for square plots) or as a pair (for rectangle plots).;
#X text 273 185 [mtx_plot] is rather slow \, so don't display too big matrices!, f 62;
#X obj 169 129 mtx_diag;
#X msg 169 106 2 1 0.5 0 -0.5 -1;
#X obj 48 100 mtx_egg;
#N canvas 0 0 879 403 colormaps 0;
#X obj 283 307 array set \$0.colormap;
#X obj 264 17 inlet;
#X obj 264 40 symbol;
#X obj 449 307 list length;
#X obj 449 330 array size \$0.colormap;
#X obj 264 280 t b l l;
#X obj 264 353 outlet;
#X obj 264 63 t b s;
#X msg 264 100 gnuplot2 0 1 2 4 5 7 8 9 109 309 409 508 617 717 826 935 935 944 953 962 962 971 980 990 999 \, magma 0 0 1 2 103 203 204 304 314 414 414 514 614 624 723 723 833 833 843 843 853 864 864 875 886 \, grey 0 111 222 333 444 555 666 777 888 999 \, rainbow 409 308 318 228 238 148 58 58 68 78 177 287 287 387 386 486 586 585 685 684 774 874 863 953 952 942 931 921 910 900 \, gist_ncar 4 12 21 21 14 7 19 39 69 79 89 88 86 85 84 82 80 180 270 370 480 480 590 591 691 791 890 980 980 970 970 960 950 940 920 910 910 900 903 906 809 709 518 628 738 848 858 868 878 878, f 93;
#X text 441 35 colormaps are tables that map input values [0 \, 1] to Pd's data-structure colors (000..999), f 48;
#X obj 264 259 route unknown;
#X obj 135 18 loadbang;
#X msg 135 41 gnuplot2;
#X text 389 198 the values (and names) found here \, are taken from matplotlib;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 5 0 6 0;
#X connect 5 1 0 0;
#X connect 5 2 3 0;
#X connect 7 0 8 0;
#X connect 7 1 10 1;
#X connect 8 0 10 0;
#X connect 10 0 5 0;
#X connect 11 0 12 0;
#X connect 12 0 2 0;
#X restore 302 303 pd colormaps;
#X msg 302 377 colormap \$1;
#X obj 302 356 symbol \$0.colormap;
#X msg 307 106 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14;
#X obj 307 129 mtx_diegg;
#X obj 307 152 mtx_./ 14;
#X obj 453 356 array define \$0.colormap;
#X msg 302 239 gnuplot2;
#X obj 302 330 bng 18 250 50 0 empty empty empty 0 -9 0 10 #fcfcfc #000000 #000000;
#X msg 319 259 grey;
#X obj 67 348 mtx_plot 100;
#X msg 371 239 magma;
#X msg 371 261 rainbow;
#X msg 371 283 gist_ncar;
#X text 457 259 colorise the plot by encoding value->colors in a table, f 30;
#X text 457 296 (the coloring takes effect when the next data arrives), f 31;
#X msg 137 73 5 20;
#X connect 2 0 6 0;
#X connect 2 1 28 0;
#X connect 2 2 4 0;
#X connect 5 0 2 0;
#X connect 7 0 8 0;
#X connect 8 0 5 0;
#X connect 12 0 17 0;
#X connect 15 0 2 0;
#X connect 16 0 15 0;
#X connect 17 0 2 0;
#X connect 18 0 26 0;
#X connect 19 0 28 0;
#X connect 20 0 19 0;
#X connect 21 0 22 0;
#X connect 22 0 23 0;
#X connect 23 0 2 0;
#X connect 25 0 18 0;
#X connect 26 0 20 0;
#X connect 27 0 18 0;
#X connect 29 0 18 0;
#X connect 30 0 18 0;
#X connect 31 0 18 0;
#X connect 34 0 5 0;
