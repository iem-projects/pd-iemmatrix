#N canvas 166 141 531 383 10;
#X declare -lib iemmatrix;
#X obj 444 311 matrix;
#X text 314 310 see also help for;
#X text 90 15 [mtx_conv];
#X text 47 34 2-dimensional convolution;
#X text 18 63 you can calculate the convolution of a matrix with a filter matrix kernel (2 dimensional FIR filtering). Of course \, it can also be used for 1-dimensional FIR convolutions.;
#X msg 42 127 bang;
#X obj 42 151 t b b b;
#X obj 64 215 t a a;
#X obj 94 248 mtx_print orig;
#X obj 64 274 mtx_conv;
#X obj 173 197 t a a;
#X obj 200 217 mtx_print filter_kernel;
#X obj 64 304 mtx_print result;
#X msg 173 174 matrix 2 3 1 1 1 1 1 1 1;
#X msg 64 176 element 4 4 1;
#X obj 63 196 matrix 5 5;
#N canvas 460 154 337 171 META 0;
#X text 12 105 AUTHOR IOhannes m zmoelnig;
#X text 12 85 OUTLET_0 matrix;
#X text 12 125 HELP_PATCH_AUTHORS IOhannes m zm√∂lnig;
#X text 12 25 LICENSE GPL-2+;
#X text 12 65 INLET_0 matrix;
#X text 12 5 KEYWORDS control matrix math;
#X text 12 45 DESCRIPTION 2d matrix convolution;
#X obj 16 147 declare -lib iemmatrix;
#X restore 442 8 pd META;
#X connect 5 0 6 0;
#X connect 6 0 15 0;
#X connect 6 1 14 0;
#X connect 6 2 13 0;
#X connect 7 0 9 0;
#X connect 7 1 8 0;
#X connect 9 0 12 0;
#X connect 10 0 9 1;
#X connect 10 1 11 0;
#X connect 13 0 10 0;
#X connect 14 0 15 0;
#X connect 15 0 7 0;
